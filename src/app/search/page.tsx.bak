// src/app/search/page.tsx
"use client";

import { useEffect, useMemo, useRef, useState } from "react";
import useUserLocation from "@/hooks/useUserLocation";
import useAuth from "@/hooks/useAuth";
import {
  openStatusStream,
  sendMessage,
  startSession,
  type Origin,
  type Plan,
} from "@/api/search/ai";

type StatusEvent =
  | { step: string; message?: string; plan?: Plan; ts?: number; [k: string]: any }
  | Record<string, any>;

export default function SearchPage() {
  // 1) 토큰 & 위치
  const { getUserToken } = useAuth();
  const token = getUserToken();
  const { location, error: locError } = useUserLocation();

  // 2) UI 상태
  const [sessionId, setSessionId] = useState<string | null>(null);
  const [input, setInput] = useState("");
  const [plan, setPlan] = useState<Plan | null>(null);
  const [events, setEvents] = useState<StatusEvent[]>([]);
  const esRef = useRef<EventSource | null>(null);
  const [starting, setStarting] = useState(false);
  const [sending, setSending] = useState(false);

  // 3) origin 변환
  const origin: Origin | undefined = useMemo(() => {
    if (!location) return undefined;
    return { mapX: location.lng, mapY: location.lat };
  }, [location]);

  // 4) 세션 시작 (토큰+위치 준비되면 1회)
  useEffect(() => {
    if (!token) return;
    if (!origin) return;
    if (sessionId) return;
    (async () => {
      try {
        setStarting(true);
        const res = await startSession(
          {
            origin,
            days: 2,
            mode: "walk",
            tags: ["맛집", "힐링"], // 초기 태그(옵션)
          },
          token
        );
        setSessionId(res.session_id);
      } catch (e: any) {
        console.error("startSession failed:", e);
        alert(`세션 시작 실패: ${e?.message || e}`);
      } finally {
        setStarting(false);
      }
    })();
  }, [token, origin, sessionId]);

  // 5) SSE 연결 (세션 생기면 연결)
  useEffect(() => {
    if (!token || !sessionId) return;
    // 기존 스트림 닫기
    if (esRef.current) {
      esRef.current.close();
      esRef.current = null;
    }
    const es = openStatusStream(sessionId, token);
    esRef.current = es;

    es.onmessage = (evt) => {
      try {
        const data = JSON.parse(evt.data);
        setEvents((prev) => [...prev, data]);

        // 결과 플랜 도착 시 보관
        if (data.step === "RESULT" && data.plan) {
          setPlan(data.plan as Plan);
        }
        if (data.step === "DONE") {
          // 필요 시 자동 스크롤/알람 등
        }
      } catch (e) {
        console.warn("SSE parse error:", e);
      }
    };
    es.onerror = (e) => {
      console.warn("SSE error:", e);
    };

    return () => {
      es.close();
      esRef.current = null;
    };
  }, [token, sessionId]);

  // 6) 메시지 전송
  const onSend = async () => {
    if (!token || !sessionId) {
      alert("세션이 아직 준비되지 않았어요.");
      return;
    }
    const message = input.trim();
    if (!message) return;

    setSending(true);
    try {
      const res = await sendMessage(
        sessionId,
        { message, origin }, // 원한다면 days/mode/tags도 함께 보낼 수 있음
        token
      );
      // 응답 즉시 결과 플랜도 반영 (SSE RESULT와 중복일 수 있지만 사용자 반응 빠르게)
      setPlan(res.plan);
      setEvents((prev) => [
        ...prev,
        { step: "CLIENT", message: `질문: ${message}`, ts: Date.now() },
        { step: res.status?.step ?? "STATUS", message: res.status?.message, ts: Date.now() },
      ]);
      setInput("");
    } catch (e: any) {
      console.error(e);
      alert(`메시지 전송 실패: ${e?.message || e}`);
    } finally {
      setSending(false);
    }
  };

  return (
    <main style={{ padding: 24, maxWidth: 1000, margin: "0 auto" }}>
      <h1 style={{ fontSize: 24, fontWeight: 700, marginBottom: 12 }}>
        🔎 여행 검색 (로컬 테스트)
      </h1>

      {/* 토큰/위치 상태 */}
      <section
        style={{
          display: "grid",
          gridTemplateColumns: "1fr 1fr",
          gap: 12,
          marginBottom: 16,
        }}
      >
        <div
          style={{
            padding: 12,
            border: "1px solid #eee",
            borderRadius: 8,
            background: "#fafafa",
          }}
        >
          <div>
            <b>Auth</b>
          </div>
          <div style={{ fontSize: 13 }}>
            {token ? "✅ 토큰 있음" : "❌ 토큰 없음 (로그인 필요)"}
          </div>
        </div>

        <div
          style={{
            padding: 12,
            border: "1px solid #eee",
            borderRadius: 8,
            background: "#fafafa",
          }}
        >
          <div>
            <b>Location</b>
          </div>
          <div style={{ fontSize: 13 }}>
            {location
              ? `✅ ${location.lat.toFixed(5)}, ${location.lng.toFixed(
                  5
                )} (by ${location.source})`
              : locError
              ? `❌ ${locError}`
              : "⏳ 위치 가져오는 중..."}
          </div>
        </div>
      </section>

      {/* 세션/입력 */}
      <section
        style={{
          display: "flex",
          gap: 8,
          alignItems: "center",
          marginBottom: 16,
        }}
      >
        <input
          value={input}
          onChange={(e) => setInput(e.target.value)}
          placeholder='예) "홍대에서 2일 코스로 맛집+볼거리 위주로 추천"'
          style={{
            flex: 1,
            padding: "10px 12px",
            border: "1px solid #ddd",
            borderRadius: 8,
            outline: "none",
          }}
          onKeyDown={(e) => {
            if (e.key === "Enter") onSend();
          }}
          disabled={!sessionId || sending}
        />
        <button
          onClick={onSend}
          disabled={!sessionId || sending}
          style={{
            padding: "10px 16px",
            borderRadius: 8,
            border: "1px solid #111",
            background: "#111",
            color: "#fff",
            cursor: "pointer",
            opacity: !sessionId || sending ? 0.6 : 1,
          }}
        >
          {sending ? "전송 중..." : "전송"}
        </button>
      </section>

      {/* 세션 정보 */}
      <section style={{ marginBottom: 16 }}>
        <div style={{ fontSize: 13, color: "#666" }}>
          세션:{" "}
          {starting
            ? "세션 시작 중..."
            : sessionId
            ? `✅ ${sessionId}`
            : "⏳ 위치/토큰 준비 중..."}
        </div>
      </section>

      {/* 상태 로그 (SSE) */}
      <section style={{ marginBottom: 20 }}>
        <h2 style={{ fontSize: 18, fontWeight: 600, marginBottom: 8 }}>
          실시간 상태 로그
        </h2>
        <div
          style={{
            border: "1px solid #eee",
            borderRadius: 8,
            padding: 12,
            maxHeight: 200,
            overflow: "auto",
            fontSize: 13,
            background: "#fff",
          }}
        >
          {events.length === 0 ? (
            <div style={{ color: "#aaa" }}>아직 이벤트가 없어요.</div>
          ) : (
            events.map((ev, idx) => (
              <div key={idx} style={{ marginBottom: 6 }}>
                <code>
                  {typeof ev === "string"
                    ? ev
                    : JSON.stringify(ev, null, 0)}
                </code>
              </div>
            ))
          )}
        </div>
      </section>

      {/* 결과 렌더링 */}
      <section>
        <h2 style={{ fontSize: 18, fontWeight: 600, marginBottom: 8 }}>
          결과 (Plan)
        </h2>
        {!plan ? (
          <div style={{ color: "#aaa" }}>아직 결과가 없어요. 질문을 입력해보세요.</div>
        ) : (
          <>
            {/* 요약 카드 */}
            <div
              style={{
                border: "1px solid #ddd",
                borderRadius: 10,
                padding: 16,
                marginBottom: 16,
                background: "#fafafa",
              }}
            >
              <div style={{ fontSize: 20, fontWeight: 700 }}>{plan.title}</div>
              <div style={{ color: "#555", marginTop: 4 }}>{plan.subtitle}</div>
              {plan.theme && plan.theme.length > 0 && (
                <div style={{ marginTop: 8, fontSize: 13 }}>
                  <b>Theme:</b> {plan.theme.join(", ")}
                </div>
              )}
              {plan.keywords && plan.keywords.length > 0 && (
                <div style={{ marginTop: 4, fontSize: 13 }}>
                  <b>Keywords:</b> {plan.keywords.join(", ")}
                </div>
              )}
              {plan.summary && (
                <div style={{ marginTop: 8, fontSize: 14 }}>{plan.summary}</div>
              )}
            </div>

            {/* 일자별 */}
            {plan.days?.map((d) => (
              <div key={d.day} style={{ marginBottom: 16 }}>
                <div style={{ fontWeight: 700, marginBottom: 6 }}>
                  Day {d.day}
                </div>
                <div style={{ display: "grid", gap: 8 }}>
                  {d.segments.map((s, i) => (
                    <div
                      key={i}
                      style={{
                        border: "1px solid #eee",
                        borderRadius: 8,
                        padding: 12,
                        background: "#fff",
                      }}
                    >
                      <div style={{ fontSize: 14, marginBottom: 4 }}>
                        <b>[{s.type}]</b> {s.title}
                      </div>
                      <div style={{ fontSize: 13, color: "#555" }}>{s.desc}</div>
                      <div style={{ fontSize: 12, color: "#777", marginTop: 4 }}>
                        이유: {s.reason}
                      </div>
                      <div style={{ fontSize: 12, color: "#777", marginTop: 4 }}>
                        좌표: {s.coords?.mapx}, {s.coords?.mapy} | 제공:{" "}
                        {s.provider} |{" "}
                        <a href={s.source} target="_blank" rel="noreferrer">
                          출처
                        </a>
                      </div>
                      {s.images?.length ? (
                        <div style={{ marginTop: 8, display: "flex", gap: 8 }}>
                          {s.images.slice(0, 3).map((img, k) => (
                            <img
                              key={k}
                              src={img}
                              alt="img"
                              width={100}
                              height={70}
                              style={{
                                objectFit: "cover",
                                borderRadius: 6,
                                border: "1px solid #eee",
                              }}
                            />
                          ))}
                        </div>
                      ) : null}
                    </div>
                  ))}
                </div>
              </div>
            ))}

            {/* 원본 JSON 보기 */}
            <details style={{ marginTop: 12 }}>
              <summary>원본 JSON</summary>
              <pre
                style={{
                  marginTop: 8,
                  border: "1px solid #eee",
                  borderRadius: 8,
                  padding: 12,
                  background: "#fff",
                  fontSize: 12,
                  overflow: "auto",
                }}
              >
                {JSON.stringify(plan, null, 2)}
              </pre>
            </details>
          </>
        )}
      </section>
    </main>
  );
}
